name: 'CI/ CD'

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest] #windows-latest, 
    runs-on: ${{matrix.os}}
    outputs: # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}  
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
        
    #Install and calculate the new version with GitVersion  
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: 5.x

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.10.2
      id: gitversion # step id used as reference for output values

    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: .NET test
      run: dotnet test src/GitHubActionsDotNet.Tests/GitHubActionsDotNet.Tests.csproj -c Release --nologo -e:CollectCoverage=true -e:CoverletOutput=TestResults/ -e:CoverletOutputFormat=lcov 

    - name: Publish coverage report to coveralls.io
      uses: coverallsapp/github-action@master
      if: runner.OS == 'Linux' #Only push the Linux coverage
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: src/GitHubActionsDotNet.Tests/TestResults/coverage.info

    #Pack the code into a NuGet package
    - name: .NET pack
      run: dotnet pack src/GitHubActionsDotNet/GitHubActionsDotNet.csproj -c Release --nologo --include-symbols -p:Version='${{ steps.gitversion.outputs.SemVer }}'

    - name: Upload nuget package back to GitHub
      uses: actions/upload-artifact@v4
      if: runner.OS == 'Linux' #Only pack the Linux nuget package
      with:
        name: nugetPackage
        path: src/GitHubActionsDotNet/bin/Release      

        
  sonarCloud:
    name: Run SonarCloud analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' 
    steps:
      - name: Run Sonarcloud test
        uses: samsmithnz/SamsDotNetSonarCloudAction@v2.1.1
        with:
          projects: 'src/GitHubActionsDotNet/GitHubActionsDotNet.csproj,src/GitHubActionsDotNet/GitHubActionsDotNet.Tests.csproj'
          dotnet-version: '8.0.x'
          sonarcloud-organization: samsmithnz-github
          sonarcloud-project: samsmithnz_GitHubActionsDotNet
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  NuGetPush:
    runs-on: ubuntu-latest
    needs: 
    - build
    - sonarCloud
    if: github.ref == 'refs/heads/main'      
    steps:
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ needs.build.outputs.Version }}" 
        echo "CommitsSinceVersionSource: ${{ needs.build.outputs.CommitsSinceVersionSource }}" 
    - name: Download nuget package artifact
      uses: actions/download-artifact@v4
      with:
        name: nugetPackage 
        path: nugetPackage
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x   
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit/version change
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: "v${{ needs.build.outputs.Version }}"
        release_name: "v${{ needs.build.outputs.Version }}"
    - name: Publish nuget package to nuget.org
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only publish a NuGet package if there has been a commit/version change
      run: dotnet nuget push nugetPackage\*.nupkg --api-key "${{ secrets.GHPackagesToken }}" --source "https://api.nuget.org/v3/index.json"
      shell: pwsh
